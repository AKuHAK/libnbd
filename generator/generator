#!/usr/bin/env ocaml
(* hey emacs, this is OCaml code: -*- tuareg -*- *)
(* nbd client library in userspace: generator
 * Copyright (C) 2013-2019 Red Hat Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *)

(* This script generates the state machine and language
 * bindings.  After editing this file, run:
 *
 *   generator/generator
 *
 * from the top source directory to regenerate output files.
 *)

#load "str.cma";;
#load "unix.cma";;

open Unix
open Printf

(*----------------------------------------------------------------------*)

(* The state machine.
 *
 * Each state has some associated C code which is called when
 * the state is entered, or when the state is re-entered because
 * of an external event.  That code is not in this file, it's
 * in [generator/states.c].
 *
 * The handle usually contains one connection, but might have more
 * if multi-conn is enabled.  Each connection starts in the CREATED
 * state.  A connection can move between states for one of two
 * reasons: Either the C code associated with the state moves
 * to another state (eg. move to the DEAD state because a system call
 * returns an error).  Or an external event happens which causes
 * the connection to move to a new state.
 *
 * An external event is something like the file descriptor being
 * ready to read or write, or the main program calling a function
 * such as [nbd_aio_connect].  Possible external events, and the
 * next state resulting, are listed in the states table below.
 *
 * An empty string [""] for next state means the same state
 * is re-entered.  The same C code for the state will be called
 * again.
 *
 * If the C code calls SET_NEXT_STATE then the next state is
 * entered immediately.  If the C code does not call SET_NEXT_STATE
 * then the state machine stops until an external event happens.
 * When the external event happens the state machine restarts,
 * either in the same state ([""]) or the new state associated
 * with the external event.
 *)

type external_event =
  | NotifyRead                  (* fd becomes ready to read *)
  | NotifyWrite                 (* fd becomes ready to write *)
  | CmdCreate                   (* [nbd_create] function called *)
  | CmdConnectSockAddr          (* [nbd_aio_connect] function called *)
  | CmdConnectTCP               (* [nbd_aio_connect_tcp] *)
  | CmdConnectCommand           (* [nbd_aio_connect_command] *)
  | CmdIssue                    (* issuing an NBD command *)

type state = {
  comment : string;             (* comment about the state *)

  (* Possible transitions from this state to a next state.  The
   * external events are coded into the state table below.  The
   * internal transitions are parsed out of the C code.
   *)
  external_events : (external_event * string) list;
  mutable internal_transitions : string list;

  (* The C code implementing this state. *)
  mutable code : string;
}

let default_state = { comment = ""; external_events = [];
                      internal_transitions = []; code = "" }

let states = [
  "CREATED", {
    default_state with
    comment = "Connection after being initially created, idle and not connected";
    external_events = [ CmdCreate, "";
                        CmdConnectSockAddr, "CONNECT";
                        CmdConnectTCP, "CONNECT_TCP";
                        CmdConnectCommand, "CONNECT_COMMAND" ];
  };

  "CONNECT", {
    default_state with
    comment = "Initial call to connect(2) on the socket";
    external_events = [ NotifyWrite, "CONNECTING" ];
  };

  "CONNECTING", {
    default_state with
    comment = "Connecting to the remote server";
    external_events = [ NotifyWrite, "" ];
  };

  "CONNECT_TCP", {
    default_state with
    comment = "Connect to a remote TCP server";
    external_events = [];
  };

  "CONNECT_TCP_CONNECT", {
    default_state with
    comment = "Initial call to connect(2) on a TCP socket";
    external_events = [ NotifyWrite, "CONNECT_TCP_CONNECTING" ];
  };

  "CONNECT_TCP_CONNECTING", {
    default_state with
    comment = "Connecting to the remote server over a TCP socket";
    external_events = [ NotifyWrite, "" ];
  };

  "CONNECT_TCP_NEXT", {
    default_state with
    comment = "Connecting to the next address over a TCP socket";
    external_events = [];
  };

  "CONNECT_COMMAND", {
    default_state with
    comment = "Connect to a subprocess";
    external_events = [];
  };

  "PREPARE_FOR_MAGIC", {
    default_state with
    comment = "Prepare to receive the magic identification from remote";
    external_events = [];
  };

  "RECV_MAGIC", {
    default_state with
    comment = "Receive initial magic identification from remote";
    external_events = [ NotifyRead, "" ];
  };

  "CHECK_MAGIC", {
    default_state with
    comment = "Check magic and version sent by remote";
  };

  "RECV_NEWSTYLE_GFLAGS", {
    default_state with
    comment = "Receive newstyle gflags from remote";
    external_events = [ NotifyRead, "" ];
  };

  "CHECK_NEWSTYLE_GFLAGS", {
    default_state with
    comment = "Check global flags sent by remote";
  };

  "SEND_NEWSTYLE_CFLAGS", {
    default_state with
    comment = "Send newstyle client flags to remote";
    external_events = [ NotifyWrite, "" ];
  };

  "TRY_NEWSTYLE_OPT_STARTTLS", {
    default_state with
    comment = "Try to send newstyle NBD_OPT_STARTTLS to upgrade to TLS";
    external_events = [];
  };

  "SEND_NEWSTYLE_OPT_STARTTLS", {
    default_state with
    comment = "Send newstyle NBD_OPT_STARTTLS to upgrade to TLS";
    external_events = [ NotifyWrite, "" ];
  };

  "RECV_NEWSTYLE_OPT_STARTTLS_REPLY", {
    default_state with
    comment = "Receive newstyle NBD_OPT_STARTTLS reply";
    external_events = [ NotifyRead, "" ];
  };

  "CHECK_NEWSTYLE_OPT_STARTTLS_REPLY", {
    default_state with
    comment = "Check newstyle NBD_OPT_STARTTLS reply";
    external_events = [];
  };

  "TLS_HANDSHAKE_READ", {
    default_state with
    comment = "TLS handshake (reading)";
    external_events = [ NotifyRead, "" ];
  };

  "TLS_HANDSHAKE_WRITE", {
    default_state with
    comment = "TLS handshake (writing)";
    external_events = [ NotifyWrite, "" ];
  };

  "TRY_NEWSTYLE_OPT_GO", {
    default_state with
    comment = "Try to send newstyle NBD_OPT_GO to end handshake";
    external_events = [];
  };

  "SEND_NEWSTYLE_OPT_GO", {
    default_state with
    comment = "Send newstyle NBD_OPT_GO to end handshake";
    external_events = [ NotifyWrite, "" ];
  };

  "SEND_NEWSTYLE_OPT_GO_EXPORTNAMELEN", {
    default_state with
    comment = "Send newstyle NBD_OPT_GO export name length";
    external_events = [ NotifyWrite, "" ];
  };

  "SEND_NEWSTYLE_OPT_GO_EXPORT", {
    default_state with
    comment = "Send newstyle NBD_OPT_GO export name";
    external_events = [ NotifyWrite, "" ];
  };

  "SEND_NEWSTYLE_OPT_GO_NRINFOS", {
    default_state with
    comment = "Send newstyle NBD_OPT_GO number of infos";
    external_events = [ NotifyWrite, "" ];
  };

  "RECV_NEWSTYLE_OPT_GO_REPLY", {
    default_state with
    comment = "Receive newstyle NBD_OPT_GO reply";
    external_events = [ NotifyRead, "" ];
  };

  "RECV_NEWSTYLE_OPT_GO_REPLY_PAYLOAD", {
    default_state with
    comment = "Receive newstyle NBD_OPT_GO reply payload";
    external_events = [ NotifyRead, "" ];
  };

  "CHECK_NEWSTYLE_OPT_GO_REPLY", {
    default_state with
    comment = "Check newstyle NBD_OPT_GO reply";
    external_events = [];
  };

  "READY", {
    default_state with
    comment = "Connection is ready to process NBD commands";
    external_events = [ CmdIssue, "ISSUE_COMMAND";
                        NotifyRead, "PREPARE_FOR_REPLY" ];
  };

  "ISSUE_COMMAND", {
    default_state with
    (* XXX There's a possible deadlock here if a server cannot
     * handle multiple requests pipelined on a single connection.
     * We could try to issue a command and block, but reads might
     * be available.  It should be possible to break this with
     * another state.
     *)
    comment = "Begin issuing a command to the remote server";
    external_events = [];
  };

  "SEND_REQUEST", {
    default_state with
    comment = "Sending a request to the remote server";
    external_events = [ NotifyWrite, "" ];
  };

  "SEND_WRITE_PAYLOAD", {
    default_state with
    comment = "Sending the write payload to the remote server";
    external_events = [ NotifyWrite, "" ];
  };

  "PREPARE_FOR_REPLY", {
    default_state with
    comment = "Prepare to receive a reply from the remote server";
    external_events = [ NotifyRead, "" ];
  };

  "RECV_REPLY", {
    default_state with
    comment = "Receive a reply from the remote server";
    external_events = [ NotifyRead, "" ];
  };

  "RECV_READ_PAYLOAD", {
    default_state with
    comment = "Receiving the read payload from the remote server";
    external_events = [ NotifyRead, "" ];
  };

  "FINISH_COMMAND", {
    default_state with
    comment = "Finish receiving a command";
    external_events = [];
  };

  "DEAD", {
    default_state with
    comment = "Connection is in an unrecoverable error state, can only be closed";
  };

  "CLOSED", {
    default_state with
    comment = "Connection is closed";
  };
]

(*----------------------------------------------------------------------*)

(* The API. *)

type call = {
  args : arg list;         (* parameters (except handle) *)
  ret : ret;               (* return value *)
  is_locked : bool;        (* most functions need to take a lock *)
  shortdesc : string;      (* short description *)
  longdesc : string;       (* long description *)
}
and arg =
| Bool of string           (* bool *)
| BytesIn of string * string (* byte array + size passed in to the function *)
| BytesOut of string * string(* byte array + size specified by caller,
                              written by the function *)
| Callback of string * arg list (* callback function returning void *)
| Int of string            (* small int *)
| Int64 of string          (* 64 bit signed int *)
| Path of string           (* filename or path *)
| SockAddrAndLen of string * string (* struct sockaddr * + socklen_t *)
| String of string         (* string *)
| StringList of string     (* argv-style NULL-terminated array of strings *)
| UInt of string           (* small unsigned int *)
| UInt32 of string         (* 32 bit unsigned int *)
| UInt64 of string         (* 64 bit unsigned int *)
and ret =
| RBool                    (* return a boolean, or error *)
| RConstString             (* return a const string, NULL for error *)
| RErr                     (* return 0 = ok, -1 = error *)
| RFd                      (* return a file descriptor, or error *)
| RInt                     (* return a small int, -1 = error *)
| RInt64                   (* 64 bit int, -1 = error *)
| RString                  (* return a newly allocated string, caller frees *)

let default_call = { args = []; ret = RErr; is_locked = true;
                     shortdesc = ""; longdesc = "" }

(* Calls on [nbd_handle *nbd] *)
let handle_calls = [
  "set_debug", {
    default_call with
    args = [ Bool "debug" ]; ret = RErr;
    shortdesc = "set or clear the debug flag";
    longdesc = "\
Set or clear the debug flag.  When debugging is enabled,
debugging messages from the library are printed to stderr,
unless a debugging callback has been defined too
(see C<nbd_set_debug_callback>) in which case they are
sent to that function.  This flag defaults to false on
newly created handles, except if C<LIBNBD_DEBUG=1> is
set in the environment in which case it defaults to true.";
  };

  "get_debug", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "return the state of the debug flag";
    longdesc = "\
Return the state of the debug flag on this handle.";
  };

  "set_debug_callback", {
    default_call with
    args = [ Int64 "id";
             Callback ("debug_fn", [Int64 "id"; String "context"; String "msg"]) ];
    ret = RErr;
    shortdesc = "set the debug callback";
    longdesc = "\
Set the debug callback.  This function is called when the library
emits debug messages, when debugging is enabled on a handle.  The
callback parameters are C<id> passed to this function, the
name of the libnbd function emitting the debug message (C<context>),
and the message itself (C<msg>).  If no debug callback is set on
a handle then messages are printed on C<stderr>.";
  };

  "set_export_name", {
    default_call with
    args = [ String "export_name" ]; ret = RErr;
    shortdesc = "set the export name";
    longdesc = "\
For servers which require an export name or can serve different
content on different exports, set the C<export_name> to
connect to.  This is only relevant for the newstyle protocol,
and you must set this before connecting.  The default is to
use the empty string.";
  };

  "get_export_name", {
    default_call with
    args = []; ret = RString;
    shortdesc = "get the export name";
    longdesc = "\
Get the export name associated with the handle.";
  };

  "set_multi_conn", {
    default_call with
    args = [ UInt "multi_conn" ]; ret = RErr;
    shortdesc = "enable or disable multi-conn and set nr connections";
    longdesc = "\
NBD can make multiple connections, if the server supports it.
The C<multi_conn> parameter controls whether this feature is
enabled (if E<gt> 1) or disabled (if C<1>).  The parameter
passed must not be C<0>.  Usually small powers of 2 (eg. 2, 4, 8)
will provide increments in performance.  Some servers do not
support this feature and will return an error on connection.";
  };

  "get_multi_conn", {
    default_call with
    args = []; ret = RInt;
    shortdesc = "get the multi-conn setting";
    longdesc = "\
Get the multi-conn setting for this handle.  This is always E<ge> 1,
where 1 means multi-conn is not enabled.";
  };

  "set_tls", {
    default_call with
    args = [Int "tls"]; ret = RErr;
    shortdesc = "Enable or require TLS (authentication and encryption)";
    longdesc = "\
Enable or require TLS (authenticated and encrypted connections) to the
NBD server.  The possible settings are:

=over 4

=item C<tls=0>

Disable TLS.  (The default setting)

=item C<tls=1>

Enable TLS if possible.  In some cases this will fall back
to an unencrypted and/or unauthenticated connection if
TLS could not be established.  However some servers will
drop the connection if TLS fails so fallback may not be
possible.

=item C<tls=2>

Require an encrypted and authenticated TLS connection.
Always fail to connect if the connection is not encrypted
and authenticated.

=back

As well as calling this you may also need to supply
the path to the certificates directory (C<nbd_set_tls_certificates>),
the username (C<nbd_set_tls_username>) and/or
the Pre-Shared Keys (PSK) file (C<nbd_set_tls_psk_file>).

For more information see L<libnbd(3)/ENCRYPTION AND AUTHENTICATION>.";
  };

  "get_tls", {
    default_call with
    args = []; ret = RInt;
    shortdesc = "Get the current TLS setting";
    longdesc = "\
Get the current TLS setting.  See C<nbd_set_tls>.";
  };

  "set_tls_certificates", {
    default_call with
    args = [Path "dir"]; ret = RErr;
    shortdesc = "set the path to the TLS certificates directory";
    longdesc = "\
Set the path to the TLS certificates directory.  If not
set and TLS is used then a compiled in default is used.
For root this is C</etc/pki/libnbd/>.  For non-root this is
C<$HOME/.pki/libnbd> and C<$HOME/.config/pki/libnbd>.  If
none of these directories can be found then the system
trusted CAs are used.";
  };

(* Can't implement this because we need a way to return string that
   can be NULL.
  "get_tls_certificates", {
    default_call with
    args = []; ret = RString;
    shortdesc = "Get the current TLS certificates directory";
    longdesc = "\
Get the current TLS directory.  See C<nbd_set_tls_certificates>.";
  };
*)

  "set_tls_verify_peer", {
    default_call with
    args = [Bool "verify"]; ret = RErr;
    shortdesc = "set whether we verify the identity of the server";
    longdesc = "\
Set this flag to control whether libnbd will verify the identity
of the server from the server's certificate and the certificate
authority.  This defaults to true when connecting to TCP servers
using TLS certificate authentication, and false otherwise.";
  };

  "get_tls_verify_peer", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "get whether we verify the identity of the server";
    longdesc = "\
Get the verify peer flag.";
  };

  "set_tls_username", {
    default_call with
    args = [String "username"]; ret = RErr;
    shortdesc = "set the TLS username";
    longdesc = "\
Set the TLS client username.  This is used
if authenticating with PSK over TLS is enabled.
If not set then the local username is used.";
  };

  "get_tls_username", {
    default_call with
    args = []; ret = RString;
    shortdesc = "Get the current TLS username";
    longdesc = "\
Get the current TLS username.  See C<nbd_set_tls_username>.";
  };

  "set_tls_psk_file", {
    default_call with
    args = [Path "filename"]; ret = RErr;
    shortdesc = "set the TLS Pre-Shared Keys (PSK) filename";
    longdesc = "\
Set the TLS Pre-Shared Keys (PSK) filename.  This is used
if trying to authenticate to the server using with a pre-shared
key.  There is no default so if this is not set then PSK
authentication cannot be used to connect to the server.";
  };

(* Can't implement this because we need a way to return string that
   can be NULL.
  "get_tls_psk_file", {
    default_call with
    args = []; ret = RString;
    shortdesc = "Get the current TLS PSK filename";
    longdesc = "\
Get the current TLS PSK filename.  See C<nbd_set_tls_psk_file>.";
  };
*)

  "connect_unix", {
    default_call with
    args = [ Path "sockpath" ]; ret = RErr;
    shortdesc = "connect to NBD server over a Unix domain socket";
    longdesc = "\
Connect (synchronously) over the named Unix domain socket (C<sockpath>)
to an NBD server running on the same machine.  This call returns
when the connection has been made.  If multi-conn is enabled, this
begins connecting all of the connections, and returns as soon as
any one of them is connected.";
  };

  "connect_tcp", {
    default_call with
    args = [ String "hostname"; String "port" ]; ret = RErr;
    shortdesc = "connect to NBD server over a TCP port";
    longdesc = "\
Connect (synchronously) to the NBD server listening on
C<hostname:port>.  The C<port> may be a port name such
as C<\"nbd\">, or it may be a port number as a string
such as C<\"10809\">.  This call returns when the connection
has been made.  If multi-conn is enabled, this begins connecting
all of the connections, and returns as soon as
any one of them is connected.";
  };

  "connect_command", {
    default_call with
    args = [ StringList "argv" ]; ret = RErr;
    shortdesc = "connect to NBD server command";
    longdesc = "\
Run the command as a subprocess and connect to it over
stdin/stdout.  This is for use with NBD servers which can
behave like inetd clients, such as C<nbdkit --single>.";
  };

  "read_only", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "the NBD export is read-only";
    longdesc = "\
Returns true if the NBD export is read-only; writes and
write-like operations will fail.  Can return an error if we have not
connected to and completed the handshake with the server.";
  };

  "can_flush", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "does the server support the flush command";
    longdesc = "\
Returns true if the server supports the flush command
(see C<nbd_flush>, C<nbd_aio_flush>).  Returns false if
the server does not.  Can return an error if we have not
connected to and completed the handshake with the server.";
  };

  "can_fua", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "does the server support the FUA flag";
    longdesc = "\
Returns true if the server supports the FUA flag on
certain commands (see C<nbd_pwrite>).  Can return an error
if we have not connected to and completed the handshake with the server.";
  };

  "is_rotational", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "is the NBD disk rotational (like a disk)";
    longdesc = "\
Returns true if the disk exposed over NBD is rotational
(like a traditional floppy or hard disk).  Returns false if
the disk has no penalty for random access (like an SSD or
RAM disk).  Can return an error if we have not connected
to and completed the handshake with the server.";
  };

  "can_trim", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "does the server support the trim command";
    longdesc = "\
Returns true if the server supports the trim command
(see C<nbd_trim>, C<nbd_aio_trim>).  Returns false if
the server does not.  Can return an error if we have not
connected to and completed the handshake with the server.";
  };

  "can_zero", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "does the server support the zero command";
    longdesc = "\
Returns true if the server supports the zero command
(see C<nbd_zero>, C<nbd_aio_zero>).  Returns false if
the server does not.  Can return an error if we have not
connected to and completed the handshake with the server.";
  };

  "can_multi_conn", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "does the server support multi-conn";
    longdesc = "\
Returns true if the server supports multi-conn
(see C<nbd_set_multi_conn>).  Returns false if
the server does not.  Can return an error if we have not
connected to and completed the handshake with the server.";
  };

  "can_cache", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "does the server support the cache command";
    longdesc = "\
Returns true if the server supports the cache command
(see C<nbd_cache>, C<nbd_aio_cache>).  Returns false if
the server does not.  Can return an error if we have not
connected to and completed the handshake with the server.";
  };

  "get_size", {
    default_call with
    args = []; ret = RInt64;
    shortdesc = "return the export size";
    longdesc = "\
Returns the size in bytes of the NBD export.  Can return an
error if we have not connected to and completed the handshake
with the server.";
  };

  "pread", {
    default_call with
    args = [ BytesOut ("buf", "count"); UInt64 "offset" ];
    ret = RErr;
    shortdesc = "read from the NBD server";
    longdesc = "\
Issue a read command to the NBD server for the range starting
at C<offset> and ending at C<offset> + C<count> - 1.  NBD
can only read all or nothing using this call.  The call
returns when the data has been read fully into C<buf> or there is an
error.

If multi-conn is enabled, the command is issued on the next
ready connection, picked in a round-robin manner.";
  };

  "pwrite", {
    default_call with
    args = [ BytesIn ("buf", "count"); UInt64 "offset"; UInt32 "flags" ];
    ret = RErr;
    shortdesc = "write to the NBD server";
    longdesc = "\
Issue a write command to the NBD server, writing the data in
C<buf> to the range starting at C<offset> and ending at
C<offset> + C<count> - 1.  NBD can only write all or nothing
using this call.  The call returns when the command has been
acknowledged by the server, or there is an error.

The C<flags> parameter may be C<0> for no flags, or may contain
C<LIBNBD_CMD_FLAG_FUA> meaning that the server should not
return until the data has been committed to permanent storage
(if that is supported - some servers cannot do this).

If multi-conn is enabled, the command is issued on the next
ready connection, picked in a round-robin manner.";
  };

  "shutdown", {
    default_call with
    args = []; ret = RErr;
    shortdesc = "disconnect from the NBD server";
    longdesc = "\
Issue the disconnect command to the NBD server.  This is
a nice way to tell the server we are going away, but from the
client's point of view has no advantage over abruptly closing
the connection (see C<nbd_close>).";
  };

  "flush", {
    default_call with
    args = []; ret = RErr;
    shortdesc = "flushing pending write requests";
    longdesc = "\
Issue the flush command to the NBD server.  The function should
return when all write commands which have completed have been
committed to permanent storage on the server.  Note this will
return an error if C<nbd_can_flush> is false.";
  };

  "trim", {
    default_call with
    args = [ UInt64 "count"; UInt64 "offset"; UInt32 "flags" ];
    ret = RErr;
    shortdesc = "send trim to the NBD server";
    longdesc = "\
Issue a trim command to the NBD server, which if supported
by the server causes a hole to be punched in the backing
store starting at C<offset> and ending at C<offset> + C<count> - 1.
The call returns when the command has been acknowledged by the server,
or there is an error.

The C<flags> parameter may be C<0> for no flags, or may contain
C<LIBNBD_CMD_FLAG_FUA> meaning that the server should not
return until the data has been committed to permanent storage
(if that is supported - some servers cannot do this).

If multi-conn is enabled, the command is issued on the next
ready connection, picked in a round-robin manner.";
  };

  "cache", {
    default_call with
    args = [ UInt64 "count"; UInt64 "offset" ];
    ret = RErr;
    shortdesc = "send cache (prefetch) to the NBD server";
    longdesc = "\
Issue the cache (prefetch) command to the NBD server, which
if supported by the server causes data to be prefetched
into faster storage by the server, speeding up a subsequent
C<nbd_pread> call.  The server can also silently ignore
this command.  Note this will return an error if
C<nbd_can_cache> is false.";
  };

  "zero", {
    default_call with
    args = [ UInt64 "count"; UInt64 "offset"; UInt32 "flags" ];
    ret = RErr;
    shortdesc = "send write zeroes to the NBD server";
    longdesc = "\
Issue a write zeroes command to the NBD server, which if supported
by the server causes a zeroes to be written efficiently
starting at C<offset> and ending at C<offset> + C<count> - 1.
The call returns when the command has been acknowledged by the server,
or there is an error.

The C<flags> parameter may be C<0> for no flags, or may contain
C<LIBNBD_CMD_FLAG_FUA> meaning that the server should not
return until the data has been committed to permanent storage
(if that is supported - some servers cannot do this).

If multi-conn is enabled, the command is issued on the next
ready connection, picked in a round-robin manner.";
  };

  "poll", {
    default_call with
    args = [ Int "timeout" ]; ret = RErr;
    shortdesc = "poll the handle once";
    longdesc = "\
This is a simple implementation of L<poll(2)> which is used
internally by synchronous API calls.  It is mainly useful as
an example of how you might integrate libnbd with your own
main loop, rather than being intended as something you would use.";
  };




]

(* Calls on [nbd_connection *conn] *)
let connection_calls = [
  "aio_connect", {
    default_call with
    args = [ SockAddrAndLen ("addr", "addrlen") ]; ret = RErr;
    shortdesc = "connect to the NBD server";
    longdesc = "\
Begin connecting to the NBD server.  You can check if the
connection has connected to the server and completed the NBD
handshake by calling C<nbd_aio_is_ready> on the connection.";
  };

  "aio_connect_tcp", {
    default_call with
    args = [ String "hostname"; String "port" ]; ret = RErr;
    shortdesc = "connect to the NBD server over a TCP port";
    longdesc = "\
Begin connecting to the NBD server listening on C<hostname:port>.
You can check if the connection has connected to the server and
completed the NBD handshake by calling C<nbd_aio_is_ready> on
the connection.";
  };

  "aio_connect_command", {
    default_call with
    args = [ StringList "argv" ]; ret = RErr;
    shortdesc = "connect to the NBD server";
    longdesc = "\
Run the command as a subprocess and begin connecting to it over
stdin/stdout.  You can check if the connection has connected to
the server and completed the NBD handshake by calling
C<nbd_aio_is_ready> on the connection.";
  };

  "aio_pread", {
    default_call with
    args = [ BytesOut ("buf", "count"); UInt64 "offset" ];
    ret = RInt64;
    shortdesc = "read from the NBD server";
    longdesc = "\
Issue a read command to the NBD server.  This returns the
unique 64 bit handle for this command.  To check if the command
completed, call C<nbd_aio_command_completed>.  Note that
you must ensure C<buf> is valid until the command has
completed.";
  };

  "aio_pwrite", {
    default_call with
    args = [ BytesIn ("buf", "count"); UInt64 "offset"; UInt32 "flags" ];
    ret = RInt64;
    shortdesc = "write to the NBD server";
    longdesc = "\
Issue a write command to the NBD server.  This returns the
unique 64 bit handle for this command.  To check if the command
completed, call C<nbd_aio_command_completed>.  Note that
you must ensure C<buf> is valid until the command has
completed.";
  };

  "aio_disconnect", {
    default_call with
    args = []; ret = RErr;
    shortdesc = "disconnect from the NBD server";
    longdesc = "\
Issue the disconnect command to the NBD server.  This is
not a normal command because NBD servers are not obliged
to send a reply.  Instead you should wait for
C<nbd_aio_is_closed> to become true on the connection.";
  };

  "aio_flush", {
    default_call with
    args = []; ret = RInt64;
    shortdesc = "disconnect from the NBD server";
    longdesc = "\
Issue the flush command to the NBD server.  This returns the
unique 64 bit handle for this command.  To check if the command
completed, call C<nbd_aio_command_completed>.";
  };

  "aio_trim", {
    default_call with
    args = [ UInt64 "count"; UInt64 "offset"; UInt32 "flags" ];
    ret = RInt64;
    shortdesc = "send trim to the NBD server";
    longdesc = "\
Issue a trim command to the NBD server.  This returns the
unique 64 bit handle for this command.  To check if the command
completed, call C<nbd_aio_command_completed>.";
  };

  "aio_cache", {
    default_call with
    args = [ UInt64 "count"; UInt64 "offset" ];
    ret = RInt64;
    shortdesc = "send cache (prefetch) to the NBD server";
    longdesc = "\
Issue the cache (prefetch) command to the NBD server.  This
returns the unique 64 bit handle for this command.  To check
if the command completed, call C<nbd_aio_command_completed>.  ";
  };

  "aio_zero", {
    default_call with
    args = [ UInt64 "count"; UInt64 "offset"; UInt32 "flags" ];
    ret = RInt64;
    shortdesc = "send write zeroes to the NBD server";
    longdesc = "\
Issue a write zeroes command to the NBD server.  This returns the
unique 64 bit handle for this command.  To check if the command
completed, call C<nbd_aio_command_completed>.";
  };

  "aio_get_fd", {
    default_call with
    args = []; ret = RFd;
    shortdesc = "return file descriptor associated with this connection";
    longdesc = "\
Return the underlying file descriptor associated with this
connection.  You can use this to check if the file descriptor
is ready for reading or writing and call C<nbd_aio_notify_read>
or C<nbd_aio_notify_write>.  See also C<nbd_aio_get_direction>.
Do not do anything else with the file descriptor.";
  };

  "aio_get_direction", {
    default_call with
    args = []; ret = RErr;
    shortdesc = "return the read or write direction";
    longdesc = "\
Return the current direction of this connection, which means
whether we are next expecting to read data from the server, write
data to the server, or both.  It returns

=over 4

=item C<LIBNBD_AIO_DIRECTION_READ> = 1

We are expected next to read from the server.  If using L<poll(2)>
you would set C<events = POLLIN>.  If C<revents> returns C<POLLIN>
you would then call C<nbd_aio_notify_read>.

=item C<LIBNBD_AIO_DIRECTION_WRITE> = 2

We are expected next to write to the server.  If using L<poll(2)>
you would set C<events = POLLOUT>.  If C<revents> returns C<POLLOUT>
you would then call C<nbd_aio_notify_write>.

=item C<LIBNBD_AIO_DIRECTION_BOTH> = 3

We are expected next to either read or write to the server.
If using L<poll(2)> you would set C<events = POLLIN|POLLOUT>.
If one of C<POLLIN> or C<POLLOUT> is returned, then see above.
However note that you shouldn't call C<nbd_aio_notify_read>
and C<nbd_aio_notify_write> because calling the first one will
change the state of the connection, possibly invalidating the second
notification.

=back";
  };

  "aio_notify_read", {
    default_call with
    args = []; ret = RErr;
    shortdesc = "notify that the connection is readable";
    longdesc = "\
Send notification to the state machine that the connection
is readable.  Typically this is called after your main loop
has detected that the file descriptor associated with this
connection is readable.";
  };

  "aio_notify_write", {
    default_call with
    args = []; ret = RErr;
    shortdesc = "notify that the connection is writable";
    longdesc = "\
Send notification to the state machine that the connection
is writable.  Typically this is called after your main loop
has detected that the file descriptor associated with this
connection is writable.";
  };

  "aio_is_ready", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "check if the connection is in the ready state";
    longdesc = "\
Return true if this connection is connected to the NBD server,
the handshake has completed, and the connection is idle or
waiting for a reply.  In this state the handle is ready to
issue commands.";
  };

  "aio_is_dead", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "check if the connection is dead";
    longdesc = "\
Return true if the connection has encountered a fatal
error and is dead.  In this state the connection (or whole handle)
may only be closed.  There is no way to recover a handle from
the dead state.";
  };

  "aio_is_closed", {
    default_call with
    args = []; ret = RBool;
    shortdesc = "check if the connection is closed";
    longdesc = "\
Return true if the connection has closed.  There is no way to
reconnect a closed connection.  Instead you must recreate the
connection object or close the whole handle.";
  };

  "aio_command_completed", {
    default_call with
    args = [Int64 "handle"]; ret = RBool;
    shortdesc = "check if the command completed";
    longdesc = "\
Return true if the command completed.  If this function returns
true then the command was successful and it has been retired.
Return false if the command is still in flight.  This can also
fail with an error in case the command failed (in this case
the command is also retired).

The C<handle> parameter is the unique 64 bit handle for the command,
as returned by a call such as C<nbd_aio_pread>.";
  };

  "connection_state", {
    default_call with
    args = []; ret = RConstString;
    shortdesc = "return a descriptive string for the state of the connection";
    longdesc = "\
Returns a descriptive string for the state of the connection.  This
can be used for debugging or troubleshooting, but you should not
rely on the state of connections since it may change in future
versions.";
  };





]

(*----------------------------------------------------------------------*)

(* Helper functions. *)

let failwithf fs = ksprintf failwith fs

let rec filter_map f = function
  | [] -> []
  | x :: xs ->
      match f x with
      | Some y -> y :: filter_map f xs
      | None -> filter_map f xs

let chan = ref Pervasives.stdout
let pr fs = ksprintf (fun str -> output_string !chan str) fs

type comment_style =
  | CStyle | CPlusPlusStyle | HashStyle | OCamlStyle | HaskellStyle
  | PODCommentStyle

let generate_header ?(extra_sources = []) comment_style =
  let inputs = "generator/generator" :: extra_sources in
  let c = match comment_style with
    | CStyle ->         pr "/* "; " *"
    | CPlusPlusStyle -> pr "// "; "//"
    | HashStyle ->      pr "# ";  "#"
    | OCamlStyle ->     pr "(* "; " *"
    | HaskellStyle ->   pr "{- "; "  "
    | PODCommentStyle -> pr "=begin comment\n\n "; "" in
  pr "NBD client library in userspace\n";
  pr "%s WARNING: THIS FILE IS GENERATED FROM\n" c;
  pr "%s %s\n" c (String.concat " " inputs);
  pr "%s ANY CHANGES YOU MAKE TO THIS FILE WILL BE LOST.\n" c;
  pr "%s\n" c;
  pr "%s Copyright (C) 2013-2019 Red Hat Inc.\n" c;
  pr "%s\n" c;
  pr "%s This library is free software; you can redistribute it and/or\n" c;
  pr "%s modify it under the terms of the GNU Lesser General Public\n" c;
  pr "%s License as published by the Free Software Foundation; either\n" c;
  pr "%s version 2 of the License, or (at your option) any later version.\n" c;
  pr "%s\n" c;
  pr "%s This library is distributed in the hope that it will be useful,\n" c;
  pr "%s but WITHOUT ANY WARRANTY; without even the implied warranty of\n" c;
  pr "%s MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n" c;
  pr "%s Lesser General Public License for more details.\n" c;
  pr "%s\n" c;
  pr "%s You should have received a copy of the GNU Lesser General Public\n" c;
  pr "%s License along with this library; if not, write to the Free Software\n" c;
  pr "%s Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n" c;
  (match comment_style with
   | CStyle -> pr " */\n"
   | CPlusPlusStyle
   | HashStyle -> ()
   | OCamlStyle -> pr " *)\n"
   | HaskellStyle -> pr "-}\n"
   | PODCommentStyle -> pr "\n=end comment\n"
  );
  pr "\n"

let files_equal n1 n2 =
  let cmd = sprintf "cmp -s %s %s" (Filename.quote n1) (Filename.quote n2) in
  match Sys.command cmd with
  | 0 -> true
  | 1 -> false
  | i -> failwithf "%s: failed with error code %d" cmd i

let output_to filename k =
  let filename_new = filename ^ ".new" in
  chan := open_out filename_new;
  k ();
  close_out !chan;
  chan := Pervasives.stdout;

  (* Is the new file different from the current file? *)
  if Sys.file_exists filename && files_equal filename filename_new then
    unlink filename_new                 (* same, so skip it *)
  else (
    (* different, overwrite old one *)
    (try chmod filename 0o644 with Unix_error _ -> ());
    rename filename_new filename;
    chmod filename 0o444;
    printf "written %s\n%!" filename;
  )

(*----------------------------------------------------------------------*)

(* Implement state machine. *)

let all_external_events =
  [NotifyRead; NotifyWrite;
   CmdCreate; CmdConnectSockAddr; CmdConnectTCP; CmdConnectCommand; CmdIssue]

let string_of_external_event = function
  | NotifyRead -> "NotifyRead"
  | NotifyWrite -> "NotifyWrite"
  | CmdCreate -> "CmdCreate"
  | CmdConnectSockAddr -> "CmdConnectSockAddr"
  | CmdConnectTCP -> "CmdConnectTCP"
  | CmdConnectCommand -> "CmdConnectCommand"
  | CmdIssue -> "CmdIssue"

let c_string_of_external_event = function
  | NotifyRead -> "notify_read"
  | NotifyWrite -> "notify_write"
  | CmdCreate -> "cmd_create"
  | CmdConnectSockAddr -> "cmd_connect_sockaddr"
  | CmdConnectTCP -> "cmd_connect_tcp"
  | CmdConnectCommand -> "cmd_connect_command"
  | CmdIssue -> "cmd_issue"

let state_machine_prologue =
  let chan = open_in "generator/states.c" in
  let lines = ref [] in
  (try while true do lines := input_line chan :: !lines done
   with End_of_file -> ());
  close_in chan;
  let lines = !lines in

  (* The last line in the file (which is the first element in lines
   * before we reverse the list) must have a particular form, check
   * and remove.
   *)
  if List.length lines = 0 || List.hd lines <> "} /* END STATE MACHINE */" then
    failwith "generator/states.c: unexpected file ending";
  let lines = List.tl lines in
  let lines = List.rev lines in

  (* Find the start of the state machine and split the list into
   * the prologue and the list of state code fragments.
   *)
  let prologue, statecodes =
    let rec loop acc = function
      | [] -> failwith "generator/states.c: could not find state machine"
      | "/* STATE MACHINE */ {" :: lines -> acc, lines
      | line :: lines -> loop (acc ^ "\n" ^ line) lines
    in
    let prologue, lines = loop "" lines in

    let statecodes = ref [] in
    let curr_state = ref None in
    let rex = Str.regexp "^ \\([A-Z0-9][A-Z0-9_]*\\):$" in
    List.iter (
      fun line ->
        if Str.string_match rex line 0 then ( (* new case *)
          (match !curr_state with
           | None -> ()
           | Some state -> statecodes := state :: !statecodes);
          curr_state := Some (Str.matched_group 1 line, "");
        )
        else (
          (match !curr_state with
           | None -> failwith "generator/states.c: missing label"
           | Some (name, code) ->
              curr_state := Some (name, code ^ "\n" ^ line)
          )
        );
    ) lines;
    (match !curr_state with
     | None -> ()
     | Some state -> statecodes := state :: !statecodes);
    let statecodes = List.rev !statecodes in

    prologue, statecodes in

  (* Check there are no code fragments which don't correspond
   * to a known state in the states table.
   *)
  List.iter (
    fun (name, _) ->
      if not (List.mem_assoc name states) then
        failwithf "generator/states.c: unknown state: %s" name
  ) statecodes;

  (* Parse the state code fragments to get internal state
   * transitions, marked by "%STATE".
   *)
  let rex = Str.regexp "%\\([A-Z0-9][A-Z0-9_]*\\)" in
  List.iter (
    fun (name, code) ->
      let code = Str.full_split rex code in
      let code =
        List.map (
          function
          | Str.Delim name ->
             Str.Delim (String.sub name 1 (String.length name - 1))
          | (Str.Text _) as c -> c
      ) code in
      (* Check all the next states exist. *)
      List.iter (
        function
        | Str.Delim name ->
           if not (List.mem_assoc name states) then
             failwithf "generator/states.c: unknown next state: %%%s" name
        | Str.Text _ -> ()
      ) code;

      (* Create the list of internal transitions. *)
      let state = List.assoc name states in
      state.internal_transitions <- (
        filter_map (function Str.Delim name -> Some name | Str.Text _ -> None)
                   code
      );

      (* Create the final C code fragment. *)
      state.code <- (
        String.concat "" (
          List.map (
            function
            | Str.Delim name -> "STATE_" ^ name
            | Str.Text text -> text
          ) code
        )
      );
  ) statecodes;

  prologue

(* Write the state machine code. *)
let generate_lib_states_h () =
  generate_header ~extra_sources:["generator/states.c"] CStyle;
  pr "enum state {\n";
  List.iter (
    fun (name, { comment }) ->
      pr "  /* %s */\n" comment;
      pr "  STATE_%s,\n" name;
      pr "\n";
  ) states;
  pr "};\n";
  pr "\n";
  pr "/* These correspond to the external events in generator/generator. */\n";
  pr "enum external_event {\n";
  List.iter (
    fun e -> pr "  %s,\n" (c_string_of_external_event e)
  ) all_external_events;
  pr "};\n"

let generate_lib_states_c () =
  generate_header ~extra_sources:["generator/states.c"] CStyle;

  pr "%s\n" state_machine_prologue;
  pr "\n";
  pr "#define SET_NEXT_STATE(s) (*blocked = false, *next_state = (s))\n";
  pr "\n";

  (* The state machine C code fragments. *)
  List.iter (
    fun (name, { comment; code }) ->
      pr "/* %s */\n" comment;
      pr "static int\n";
      pr "_enter_STATE_%s (struct nbd_handle *h,\n" name;
      pr "             struct nbd_connection *conn,\n";
      pr "             enum state *next_state,\n";
      pr "             bool *blocked)\n";
      pr "{\n";
      if code <> "" then
        pr "%s\n" code
      else
        pr "  return 0;\n";
      pr "}\n";
      pr "\n";
      pr "static int\n";
      pr "enter_STATE_%s (struct nbd_handle *h, struct nbd_connection *conn,\n"
         name;
      pr "            bool *blocked)\n";
      pr "{\n";
      pr "  int r;\n";
      pr "  enum state next_state = STATE_%s;\n" name;
      pr "\n";
      pr "  r = _enter_STATE_%s (h, conn, &next_state, blocked);\n" name;
      pr "  if (conn->state != next_state) {\n";
      pr "    debug (h, \"conn %%\" PRIi64 \": transition: %%s -> %%s\",\n";
      pr "           conn->id, \"%s\",\n" name;
      pr "           nbd_internal_state_short_string (next_state));\n";
      pr "    conn->state = next_state;\n";
      pr "  }\n";
      pr "  return r;\n";
      pr "}\n";
      pr "\n";
  ) states;

  pr "/* Run the state machine based on an external event until it would block. */\n";
  pr "int\n";
  pr "nbd_internal_run (struct nbd_handle *h, struct nbd_connection *conn,\n";
  pr "                  enum external_event ev)\n";
  pr "{\n";
  pr "  int r;\n";
  pr "  bool blocked;\n";
  pr "\n";
  pr "  /* Validate and handle the external event. */\n";
  pr "  switch (conn->state)\n";
  pr "  {\n";
  List.iter (
    fun (name, { external_events }) ->
      pr "  case STATE_%s:\n" name;
      if external_events <> [] then (
        pr "    switch (ev)\n";
        pr "    {\n";
        List.iter (
          fun (e, next_state) ->
            pr "    case %s:\n" (c_string_of_external_event e);
            if next_state <> "" then (
              pr "      conn->state = STATE_%s;\n" next_state;
              pr "      debug (h, \"conn %%\" PRIi64 \": event %%s: %%s -> %%s\",\n";
              pr "             conn->id, \"%s\", \"%s\", \"%s\");\n"
                 (string_of_external_event e) name next_state;
            );
            pr "      goto ok;\n";
        ) external_events;
        pr "    default: ; /* nothing, silence GCC warning */\n";
        pr "    }\n";
      );
      pr "    break;\n";
  ) states;
  pr "  }\n";
  pr "\n";
  pr "  set_error (0, \"external event %%d is invalid in state %%s\",\n";
  pr "             ev, nbd_internal_state_short_string (conn->state));\n";
  pr "  return -1;\n";
  pr "\n";
  pr " ok:\n";
  pr "  do {\n";
  pr "    blocked = true;\n";
  pr "\n";
  pr "    /* Run a single step. */\n";
  pr "    switch (conn->state)\n";
  pr "    {\n";
  List.iter (
    fun (name, _) ->
      pr "    case STATE_%s:\n" name;
      pr "      r = enter_STATE_%s (h, conn, &blocked);\n" name;
      pr "      break;\n"
  ) states;
  pr "    default:\n";
  pr "      abort (); /* Should never happen, but keeps GCC happy. */\n";
  pr "    }\n";
  pr "\n";
  pr "    if (r == -1) return -1;\n";
  pr "  } while (!blocked);\n";
  pr "  return 0;\n";
  pr "}\n";
  pr "\n";

  pr "/* Returns whether in the current state read or write would be valid. */\n";
  pr "int\n";
  pr "nbd_unlocked_aio_get_direction (struct nbd_connection *conn)\n";
  pr "{\n";
  pr "  int r = 0;\n";
  pr "\n";
  pr "  switch (conn->state)\n";
  pr "  {\n";
  List.iter (
    fun (name, { external_events }) ->
      pr "  case STATE_%s:\n" name;
      List.iter (
        fun (e, _) ->
          match e with
          | NotifyRead ->  pr "    r |= LIBNBD_AIO_DIRECTION_READ;\n"
          | NotifyWrite -> pr "    r |= LIBNBD_AIO_DIRECTION_WRITE;\n"
          | CmdCreate | CmdConnectSockAddr | CmdConnectTCP | CmdConnectCommand
          | CmdIssue -> ()
      ) external_events;
      pr "    break;\n";
  ) states;
  pr "  }\n";
  pr "\n";
  pr "  return r;\n";
  pr "}\n";
  pr "\n";

  pr "/* Other functions associated with the state machine. */\n";
  pr "const char *\n";
  pr "nbd_internal_state_short_string (enum state state)\n";
  pr "{\n";
  pr "  switch (state)\n";
  pr "  {\n";
  List.iter (
    fun (name, { comment }) ->
      pr "  case STATE_%s:\n" name;
      pr "    return \"%s\";\n" name
  ) states;
  pr "  }\n";
  pr "\n";
  pr "  /* This function is only used for debug messages, and\n";
  pr "   * this should never happen.\n";
  pr "   */\n";
  pr "  return \"UNKNOWN!\";\n";
  pr "}\n";
  pr "\n";

  pr "const char *\n";
  pr "nbd_unlocked_connection_state (struct nbd_connection *conn)\n";
  pr "{\n";
  pr "  switch (conn->state)\n";
  pr "  {\n";
  List.iter (
    fun (name, { comment }) ->
      pr "  case STATE_%s:\n" name;
      pr "    return \"%s\" \": \"\n" name;
      pr "           \"%s\";\n" comment;
      pr "\n";
  ) states;
  pr "  }\n";
  pr "\n";
  pr "  return NULL;\n";
  pr "}\n"

(*----------------------------------------------------------------------*)

(* Generate C API. *)

let generate_lib_libnbd_syms () =
  generate_header HashStyle;

  pr "{\n";
  pr "  global:\n";
  pr "    nbd_create;\n";
  pr "    nbd_close;\n";
  pr "    nbd_get_connection;\n";
  pr "    nbd_get_errno;\n";
  pr "    nbd_get_error;\n";
  pr "    nbd_connection_close;\n";
  List.iter (fun (name, _) -> pr "    nbd_%s;\n" name) handle_calls;
  List.iter (fun (name, _) -> pr "    nbd_%s;\n" name) connection_calls;
  pr "\n";
  pr "  # Everything else is hidden.\n";
  pr "  local: *;\n";
  pr "};\n"

let name_of_arg = function
| Bool n -> [n]
| BytesIn (n, len) -> [n; len]
| BytesOut (n, len) -> [n; len]
| Callback (n, _) -> [n]
| Int n -> [n]
| Int64 n -> [n]
| Path n -> [n]
| SockAddrAndLen (n, len) -> [n; len]
| String n -> [n]
| StringList n -> [n]
| UInt n -> [n]
| UInt32 n -> [n]
| UInt64 n -> [n]

let rec print_c_arg_list ?handle args =
  pr "(";
  let comma = ref false in
  (match handle with
   | None -> ()
   | Some (htype, hname) ->
      comma := true;
      pr "struct nbd_%s *" htype;
      match hname with
      | None -> ()
      | Some hname -> pr "%s" hname
  );
  List.iter (
    fun arg ->
      if !comma then pr ", ";
      comma := true;
      match arg with
      | Bool n -> pr "bool %s" n
      | BytesIn (n, len) -> pr "const void *%s, size_t %s" n len
      | BytesOut (n, len) -> pr "void *%s, size_t %s" n len
      | Callback (n, args) -> pr "void (*%s) " n; print_c_arg_list args
      | Int n -> pr "int %s" n
      | Int64 n -> pr "int64_t %s" n
      | Path n
      | String n -> pr "const char *%s" n
      | StringList n -> pr "char **%s" n
      | SockAddrAndLen (n, len) ->
         pr "const struct sockaddr *%s, socklen_t %s" n len
      | UInt n -> pr "unsigned %s" n
      | UInt32 n -> pr "uint32_t %s" n
      | UInt64 n -> pr "uint64_t %s" n
  ) args;
  pr ")"

let print_extern name htype args ret =
  pr "extern ";
  (match ret with
   | RBool
   | RErr
   | RFd
   | RInt -> pr "int "
   | RConstString -> pr "const char *"
   | RInt64 -> pr "int64_t "
   | RString -> pr "char *"
  );
  pr "nbd_%s " name;
  print_c_arg_list ~handle:(htype, None) args;
  pr ";\n"

let generate_include_libnbd_h () =
  generate_header CStyle;

  pr "#ifndef LIBNBD_H\n";
  pr "#define LIBNBD_H\n";
  pr "\n";
  pr "#include <stdbool.h>\n";
  pr "#include <stdint.h>\n";
  pr "#include <sys/socket.h>\n";
  pr "\n";
  pr "struct nbd_handle;\n";
  pr "struct nbd_connection;\n";
  pr "\n";
  pr "#define LIBNBD_AIO_DIRECTION_READ  1\n";
  pr "#define LIBNBD_AIO_DIRECTION_WRITE 2\n";
  pr "#define LIBNBD_AIO_DIRECTION_BOTH  3\n";
  pr "\n";
  pr "#define LIBNBD_CMD_FLAG_FUA        (1<<0)\n";
  pr "\n";
  pr "extern struct nbd_handle *nbd_create (void);\n";
  pr "extern void nbd_close (struct nbd_handle *h);\n";
  pr "extern const char *nbd_get_error (void);\n";
  pr "extern int nbd_get_errno (void);\n";
  pr "\n";
  List.iter (
    fun (name, { args; ret }) -> print_extern name "handle" args ret
  ) handle_calls;
  pr "\n";
  pr "extern struct nbd_connection *nbd_get_connection (struct nbd_handle *h,\n";
  pr "                                                  unsigned i);\n";
  pr "extern int nbd_connection_close (struct nbd_connection *conn);\n";
  pr "\n";
  List.iter (
    fun (name, { args; ret }) -> print_extern name "connection" args ret
  ) connection_calls;
  pr "\n";
  pr "#endif /* LIBNBD_H */\n"

let generate_lib_unlocked_h () =
  generate_header CStyle;

  pr "#ifndef LIBNBD_UNLOCKED_H\n";
  pr "#define LIBNBD_UNLOCKED_H\n";
  pr "\n";
  List.iter (
    fun (name, { args; ret }) ->
      print_extern ("unlocked_" ^ name) "handle" args ret
  ) handle_calls;
  pr "\n";
  List.iter (
    fun (name, { args; ret }) ->
      print_extern ("unlocked_" ^ name) "connection" args ret
  ) connection_calls;
  pr "\n";
  pr "#endif /* LIBNBD_UNLOCKED_H */\n"

(* Generate wrappers around each API call which are a place to
 * grab the thread mutex (lock) and do logging.
 *)
let generate_lib_api_c () =
  let print_wrapper name htype hname lock args ret =
    (match ret with
     | RBool
     | RErr
     | RFd
     | RInt -> pr "int\n"
     | RConstString -> pr "const char *\n"
     | RInt64 -> pr "int64_t\n"
     | RString -> pr "char *\n"
    );
    pr "nbd_%s " name;
    print_c_arg_list ~handle:(htype, Some hname) args;
    pr "\n";
    pr "{\n";
    (match ret with
     | RBool
     | RErr
     | RFd
     | RInt -> pr "  int ret;\n"
     | RConstString -> pr "  const char *ret;\n"
     | RInt64 -> pr "  int64_t ret;\n"
     | RString -> pr "  char *ret;\n"
    );
    pr "\n";
    pr "  pthread_mutex_lock (&%s);\n" lock;
    pr "  nbd_internal_reset_error (\"nbd_%s\");\n" name;
    pr "  ret = nbd_unlocked_%s (%s" name hname;
    let argnames = List.flatten (List.map name_of_arg args) in
    List.iter (pr ", %s") argnames;
    pr ");\n";
    pr "  pthread_mutex_unlock (&%s);\n" lock;
    pr "  return ret;\n";
    pr "}\n";
    pr "\n";
  in

  generate_header CStyle;

  pr "#include <config.h>\n";
  pr "\n";
  pr "#include <stdio.h>\n";
  pr "#include <stdlib.h>\n";
  pr "\n";
  pr "#include <pthread.h>\n";
  pr "\n";
  pr "#include \"libnbd.h\"\n";
  pr "#include \"internal.h\"\n";
  pr "\n";
  List.iter (
    fun (name, { args; ret }) ->
      print_wrapper name "handle" "h" "h->lock" args ret
  ) handle_calls;
  pr "\n";
  List.iter (
    fun (name, { args; ret }) ->
      print_wrapper name "connection" "conn" "conn->h->lock" args ret
  ) connection_calls

(*----------------------------------------------------------------------*)

(* Python bindings. *)

let generate_python_methods_h () =
  generate_header CStyle;

  pr "#ifndef LIBNBD_METHODS_H\n";
  pr "#define LIBNBD_METHODS_H\n";
  pr "\n";
  pr "#define PY_SSIZE_T_CLEAN 1\n";
  pr "#include <Python.h>\n";
  pr "\n";
  pr "#include <assert.h>\n";
  pr "\n";
  pr "\
extern char **nbd_internal_py_get_string_list (PyObject *);
extern void nbd_internal_py_free_string_list (char **);

static inline struct nbd_handle *
get_handle (PyObject *obj)
{
  assert (obj);
  assert (obj != Py_None);
  return (struct nbd_handle *) PyCapsule_GetPointer(obj, \"nbd_handle\");
}

static inline struct nbd_connection *
get_connection (PyObject *obj)
{
  assert (obj);
  assert (obj != Py_None);
  return (struct nbd_connection *) PyCapsule_GetPointer(obj, \"nbd_connection\");
}
";

  List.iter (
    fun name ->
      pr "extern PyObject *nbd_internal_py_%s (PyObject *self, PyObject *args);\n"
         name;
  ) ([ "create"; "close"; "get_connection"; "connection_close" ] @
       List.map fst (handle_calls @ connection_calls));

  pr "\n";
  pr "#endif /* LIBNBD_METHODS_H */\n"

let generate_python_libnbdmod_c () =
  generate_header CStyle;

  pr "#include <config.h>\n";
  pr "\n";
  pr "#define PY_SSIZE_T_CLEAN 1\n";
  pr "#include <Python.h>\n";
  pr "\n";
  pr "#include <stdio.h>\n";
  pr "#include <stdlib.h>\n";
  pr "#include <assert.h>\n";
  pr "\n";
  pr "#include <libnbd.h>\n";
  pr "\n";
  pr "#include \"methods.h\"\n";
  pr "\n";
  pr "static PyMethodDef methods[] = {\n";
  List.iter (
    fun name ->
      pr "  { (char *) \"%s\", nbd_internal_py_%s, METH_VARARGS, NULL },\n"
         name name;
  ) ([ "create"; "close"; "get_connection"; "connection_close" ] @
       List.map fst (handle_calls @ connection_calls));
  pr "  { NULL, NULL, 0, NULL }\n";
  pr "};\n";
  pr "\n";
  pr "\
static struct PyModuleDef moduledef = {
  PyModuleDef_HEAD_INIT,
  \"libnbdmod\",           /* m_name */
  \"libnbd module\",       /* m_doc */
  -1,                    /* m_size */
  methods,               /* m_methods */
  NULL,                  /* m_reload */
  NULL,                  /* m_traverse */
  NULL,                  /* m_clear */
  NULL,                  /* m_free */
};

static PyObject *
moduleinit (void)
{
  return PyModule_Create (&moduledef);
}

extern PyMODINIT_FUNC PyInit_libnbdmod (void);

PyMODINIT_FUNC
PyInit_libnbdmod (void)
{
  return moduleinit ();
}
"

let print_python_binding name { args; ret } htype hname =
  pr "PyObject *\n";
  pr "nbd_internal_py_%s (PyObject *self, PyObject *args)\n" name;
  pr "{\n";
  pr "  PyObject *py_%s;\n" hname;
  pr "  struct nbd_%s *%s;\n" htype hname;
  (match ret with
   | RBool
   | RErr
   | RFd
   | RInt -> pr "  int ret;\n"
   | RConstString -> pr "  const char *ret;\n"
   | RInt64 -> pr "  int64_t ret;\n"
   | RString -> pr "  char *ret;\n";
  );
  pr "  PyObject *py_ret;\n";
  List.iter (
    function
    | Bool n -> pr "  int %s;\n" n
    | BytesIn (n, _) -> pr "  Py_buffer %s;\n" n
    | BytesOut (n, count) ->
       pr "  char *%s;\n" n;
       pr "  Py_ssize_t %s;\n" count
    | Callback (n, _) -> pr "  PyObject *%s;\n" n
    | Int n -> pr "  int %s;\n" n
    | Int64 n ->
       pr "  int64_t %s_i64;\n" n;
       pr "  long long %s; /* really int64_t */\n" n
    | Path n -> pr "  char *%s = NULL;\n" n
    | SockAddrAndLen (n, _) ->
       pr "  /* XXX Complicated - Python uses a tuple of different\n";
       pr "   * lengths for the different socket types.\n";
       pr "   */\n";
       pr "  PyObject *%s;\n" n
    | String n -> pr "  const char *%s;\n" n
    | StringList n ->
       pr "  PyObject *py_%s;\n" n;
       pr "  char **%s = NULL;\n" n
    | UInt n -> pr "  unsigned int %s;\n" n
    | UInt32 n ->
       pr "  uint32_t %s_u32;\n" n;
       pr "  unsigned int %s; /* really uint32_t */\n" n
    | UInt64 n ->
       pr "  uint64_t %s_u64;\n" n;
       pr "  unsigned long long %s; /* really uint64_t */\n" n
  ) args;
  pr "\n";

  (* Parse the Python parameters. *)
  pr "  if (!PyArg_ParseTuple (args, (char *) \"O\"";
  List.iter (
    function
    | Bool n -> pr " \"b\""
    | BytesIn (n, _) -> pr " \"y*\""
    | BytesOut (_, count) -> pr " \"n\""
    | Callback (n, _) -> pr " \"O\""
    | Int n -> pr " \"i\""
    | Int64 n -> pr " \"L\""
    | Path n -> pr " \"O&\""
    | SockAddrAndLen (n, _) -> pr " \"O\""
    | String n -> pr " \"s\""
    | StringList n -> pr " \"O\""
    | UInt n -> pr " \"I\""
    | UInt32 n -> pr " \"I\""
    | UInt64 n -> pr " \"K\""
  ) args;
  pr "\n";
  pr "                         \":nbd_%s\",\n" name;
  pr "                         &py_%s" hname;
  List.iter (
    function
    | Bool n -> pr ", &%s" n
    | BytesIn (n, _) -> pr ", &%s" n
    | BytesOut (_, count) -> pr ", &%s" count
    | Callback (n, _) -> pr ", &%s" n
    | Int n -> pr ", &%s" n
    | Int64 n -> pr ", &%s" n
    | Path n -> pr ", PyUnicode_FSConverter, &%s" n
    | SockAddrAndLen (n, _) -> pr ", &%s" n
    | String n -> pr ", &%s" n
    | StringList n -> pr ", &py_%s" n
    | UInt n -> pr ", &%s" n
    | UInt32 n -> pr ", &%s" n
    | UInt64 n -> pr ", &%s" n
  ) args;
  pr "))\n";
  pr "    return NULL;\n";

  (* Call the underlying C function. *)
  pr "  %s = get_%s (py_%s);\n" hname htype hname;
  List.iter (
    function
    | Bool _ -> ()
    | BytesIn _ ->
       if htype = "connection" then
         (* The AIO pread/pwrite calls require a buffer which
          * persists for as long as the command is running, which
          * is at least after this function returns.  So we need
          * a way to allocate one of those and pass it to the
          * function from Python and free it later.
          *)
         pr "  abort (); /* XXX BytesIn not implemented for AIO */\n"
    | BytesOut (n, count) ->
       if htype = "connection" then
         pr "  abort (); /* XXX BytesOut not implemented for AIO */\n"
       else
         pr "  %s = malloc (%s);\n" n count
    | Callback _ ->
       pr "  abort (); /* XXX Callback not implemented */\n";
    | Int _ -> ()
    | Int64 n -> pr "  %s_i64 = %s;\n" n n
    | Path _ -> ()
    | SockAddrAndLen _ ->
       pr "  abort (); /* XXX SockAddrAndLen not implemented */\n";
    | String _ -> ()
    | StringList n ->
       pr "  %s = nbd_internal_py_get_string_list (py_%s);\n" n n;
       pr "  if (!%s) { py_ret = NULL; goto out; }\n" n
    | UInt _ -> ()
    | UInt32 n -> pr "  %s_u32 = %s;\n" n n
    | UInt64 n -> pr "  %s_u64 = %s;\n" n n
  ) args;
  pr "  ret = nbd_%s (%s" name hname;
  List.iter (
    function
    | Bool n -> pr ", %s" n
    | BytesIn (n, _) -> pr ", %s.buf, %s.len" n n
    | BytesOut (n, count) -> pr ", %s, %s" n count
    | Callback (n, _) -> pr ", /* XXX */ (void *) %s" n
    | Int n -> pr ", %s" n
    | Int64 n -> pr ", %s_i64" n
    | Path n -> pr ", %s" n
    | SockAddrAndLen (n, _) -> pr ", /* XXX */ (void *) %s, 0" n
    | String n -> pr ", %s" n
    | StringList n -> pr ", %s" n
    | UInt n -> pr ", %s" n
    | UInt32 n -> pr ", %s_u32" n
    | UInt64 n -> pr ", %s_u64" n
  ) args;
  pr ");\n";
  (match ret with
   | RBool | RErr | RFd | RInt | RInt64 -> pr "  if (ret == -1) {\n";
   | RConstString | RString -> pr "  if (ret == NULL) {\n";
  );
  pr "    PyErr_SetString (PyExc_RuntimeError, nbd_get_error ());\n";
  pr "    py_ret = NULL;\n";
  pr "    goto out;\n";
  pr "  }\n";

  (* Convert the result back to a Python object and return it. *)
  let use_ret = ref true in
  List.iter (
    function
    | BytesOut (n, count) ->
       pr "  py_ret = PyBytes_FromStringAndSize (%s, %s);\n" n count;
       use_ret := false
    | Bool _
    | BytesIn _
    | Callback _
    | Int _
    | Int64 _
    | Path _
    | SockAddrAndLen _
    | String _
    | StringList _
    | UInt _
    | UInt32 _
    | UInt64 _ -> ()
  ) args;
  if !use_ret then (
    match ret with
    | RBool ->
       pr "  py_ret = ret ? Py_True : Py_False;\n";
       pr "  Py_INCREF (py_ret);\n"
    | RConstString ->
       pr "  py_ret = PyUnicode_FromString (ret);\n"
    | RErr ->
       pr "  py_ret = Py_None;\n";
       pr "  Py_INCREF (py_ret);\n"
    | RFd
    | RInt ->
       pr "  py_ret = PyLong_FromLong (ret);\n"
    | RInt64 ->
       pr "  py_ret = PyLong_FromLongLong (ret);\n"
    | RString ->
       pr "  py_ret = PyUnicode_FromString (ret);\n";
       pr "  free (ret);\n"
  );

  pr "\n";
  pr " out:\n";
  List.iter (
    function
    | Bool _ -> ()
    | BytesIn (n, _) -> pr "  PyBuffer_Release (&%s);\n" n
    | BytesOut _ -> ()
    | Callback _ -> ()
    | Int _ -> ()
    | Int64 _ -> ()
    | Path n -> pr "  free (%s);\n" n
    | SockAddrAndLen _ -> ()
    | String n -> ()
    | StringList n -> pr "  nbd_internal_py_free_string_list (%s);\n" n
    | UInt _ -> ()
    | UInt32 _ -> ()
    | UInt64 _ -> ()
  ) args;
  pr "  return py_ret;\n";
  pr "}\n";
  pr "\n"

let generate_python_methods_c () =
  generate_header CStyle;

  pr "#define PY_SSIZE_T_CLEAN 1\n";
  pr "#include <Python.h>\n";
  pr "\n";
  pr "#include <stdio.h>\n";
  pr "#include <stdlib.h>\n";
  pr "\n";
  pr "#include <libnbd.h>\n";
  pr "\n";
  pr "#include <methods.h>\n";
  pr "\n";
  List.iter (
    fun (name, fn) ->
      print_python_binding name fn "handle" "h"
  ) handle_calls;
  List.iter (
    fun (name, fn) ->
      print_python_binding name fn "connection" "conn"
  ) connection_calls

let generate_python_nbd_py () =
  generate_header HashStyle;

  pr "\
\"\"\"Python bindings for libnbd

import nbd
h = nbd.NBD ()
h.connect_tcp (\"localhost\", \"nbd\")
buf = h.pread (512, 0)

Read the libnbd(3) man page to find out how to use the API.
\"\"\"

import libnbdmod

AIO_DIRECTION_READ  = 1
AIO_DIRECTION_WRITE = 2
AIO_DIRECTION_BOTH  = 3

CMD_FLAG_FUA = 1<<0

class NBD (object):
    def __init__ (self):
        \"\"\"Create a new NBD handle\"\"\"
        self._o = libnbdmod.create ()

    def __del__ (self):
        \"\"\"Close the NBD handle and all connections\"\"\"
        libnbdmod.close (self._o)

    def get_connection (self, i):
        \"\"\"Get the i'th connection associated with the handle\"\"\"
        return NBDConnection (self, i)

";

  List.iter (
    fun (name, { args; shortdesc }) ->
      let args = List.map (
                     function
                     | Bool n -> n
                     | BytesIn (n, _) -> n
                     | BytesOut (_, count) -> count
                     | Callback (n, _) -> n
                     | Int n -> n
                     | Int64 n -> n
                     | Path n -> n
                     | SockAddrAndLen (n, _) -> n
                     | String n -> n
                     | StringList n -> n
                     | UInt n -> n
                     | UInt32 n -> n
                     | UInt64 n -> n
                   ) args in
      let args = List.map ((^) ", ") args in
      let args = String.concat "" args in
      pr "    def %s (self%s):\n" name args;
      pr "        \"\"\"%s\"\"\"\n" shortdesc;
      pr "        return libnbdmod.%s (self._o%s)\n" name args;
      pr "\n"
  ) handle_calls;

  pr "\
class NBDConnection (object):
    def __init__ (self, h, i):
        \"\"\"Get the i'th connection associated with the handle\"\"\"
        self._o = libnbdmod.get_connection (h, i)

    # Note there is intentionally no __del__ method.
    def close (self):
        \"\"\"Close this connection.  The i'th connection slot in
        the handle is reopened with a freshly created connection.

        The underlying C object is freed when you call this, so
        you must not call any other methods on the connection
        afterwards.
        \"\"\"
        libnbdmod.connection_close (self._o)
";

  List.iter (
    fun (name, { args; shortdesc }) ->
      let args = List.map (
                     function
                     | Bool n -> n
                     | BytesIn (n, _) -> n
                     | BytesOut (_, count) -> count
                     | Callback (n, _) -> n
                     | Int n -> n
                     | Int64 n -> n
                     | Path n -> n
                     | SockAddrAndLen (n, _) -> n
                     | String n -> n
                     | StringList n -> n
                     | UInt n -> n
                     | UInt32 n -> n
                     | UInt64 n -> n
                   ) args in
      let args = List.map ((^) ", ") args in
      let args = String.concat "" args in
      pr "    def %s (self%s):\n" name args;
      pr "        \"\"\"%s\"\"\"\n" shortdesc;
      pr "        return libnbdmod.%s (self._o%s)\n" name args;
      pr "\n"
  ) connection_calls;

  (* For nbdsh. *)
  pr "\
if __name__ == \"__main__\":
    import nbd
    import code
    import sys

    h = nbd.NBD ()
    sys.ps1 = \"nbd> \"

    banner = '''
Welcome to nbdsh, the shell for interacting with
Network Block Device (NBD) servers.

The ‘nbd’ module has already been imported and there
is an open NBD handle called ‘h’.

h.connect_tcp (\"remote\", \"10809\")   # Connect to a remote server.
h.get_size ()                       # Get size of the remote disk.
buf = h.pread (512, 0)              # Read the first sector.
exit() or Ctrl-D                    # Quit the shell
'''

    code.interact (banner = banner, local = locals(), exitmsg = '')
"

(*----------------------------------------------------------------------*)

(* Write the output files. *)
let () =
  output_to "lib/states.h" generate_lib_states_h;
  output_to "lib/states.c" generate_lib_states_c;
  output_to "lib/libnbd.syms" generate_lib_libnbd_syms;
  output_to "include/libnbd.h" generate_include_libnbd_h;
  output_to "lib/unlocked.h" generate_lib_unlocked_h;
  output_to "lib/api.c" generate_lib_api_c;
  output_to "python/methods.h" generate_python_methods_h;
  output_to "python/libnbdmod.c" generate_python_libnbdmod_c;
  output_to "python/methods.c" generate_python_methods_c;
  output_to "python/nbd.py" generate_python_nbd_py
