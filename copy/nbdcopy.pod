=head1 NAME

nbdcopy - copy to and from an NBD server

=head1 SYNOPSIS

 nbdcopy [-C N|--connections=N] [--flush] [-p]
         [--synchronous] [-R N|--requests=N]
         [-T N|--threads=N]
         SOURCE DESTINATION

 SOURCE, DESTINATION := - | FILE | DEVICE | NBD-URI

 nbdcopy --help

 nbdcopy --version

=head1 EXAMPLES

=head2 nbdcopy nbd://example.com local.img

This copies everything from the NBD server at C<example.com> to a
local file called F<local.img>.

=head2 nbdcopy nbd://example.com - | file -

This streams the first part of the disk on the NBD server at
C<example.com> into the L<file(1)> command.  Note here that C<-> means
to stream to stdout (and therefore into the pipe to the file command).

=head2 nbdcopy -p /dev/sdX nbd://example.com

Copy the full local hard disk C</dev/sdX> to the NBD server at
C<example.com>.  Because of the I<-p> option this will print a
progress bar.

=head2 cat disk1 disk2 | nbdcopy - "nbd+unix:///?socket=/tmp/unixsock"

Concatenate two disk images and stream it to the NBD server listening
on the Unix domain socket F</tmp/unixsock>.

=head2 nbdcopy nbd://server1 nbd://server2

Copy a full disk from one NBD server to another.

=head1 DESCRIPTION

nbdcopy copies to and from an NBD server.  It can upload a local file
to an NBD server, or download the contents of an NBD server to a local
file, device or stdin/stdout.  It can also copy between NBD servers.

The local file can be a file, a block device (eg. C</dev/cdrom>), or
C<-> which means stream in from stdin or stream out to stdout.  The
NBD server is specified using an NBD URI (like C<nbd://localhost>).
The NBD server can be local or remote, and encryption can be used if
libnbd was built with encryption support.

For more complex copying operations including converting between disk
formats use C<qemu-img convert>, see L<qemu-img(1)>.

=head1 OPTIONS

=over 4

=item B<--help>

Display brief command line help and exit.

=item B<-C> N

=item B<--connections=>N

Set the maximum number of NBD connections ("multi-conn").  By default
nbdcopy will try to use multi-conn with up to 4 connections if the NBD
server supports it.

=item B<--flush>

Flush writes to ensure that everything is written to persistent
storage before nbdcopy exits.

=item B<-p>

=item B<--progress>

Display a progress bar.

=item B<--synchronous>

Force synchronous copying using the L<libnbd(3)> synchronous ("high
level") API.  This is slow but may be necessary for some broken NBD
servers which cannot handle multiple requests in flight.  This mode is
also used when streaming to and from stdio, pipes and sockets.

=item B<-R> N

=item B<--requests=>N

Set the maximum number of requests in flight per NBD connection.

=item B<-T> N

=item B<--threads=>N

Use up to N threads for copying.  By default this is set to the number
of processor cores available.

Note I<--threads=0> means autodetect and I<--threads=1> means use a
single thread.

=item B<-V>

=item B<--version>

Display the package name and version and exit.

=back

=head1 MULTI-CONN, THREADS, REQUESTS IN FLIGHT

The three options I<--connections>, I<--threads> and I<--requests> are
related and control the amount of parallelism available.  The defaults
should ensure a reasonable amount of parallelism if possible and you
don’t need to adjust them, but this section tries to describe what is
going on.

Firstly if either side of the copy is streaming to or from stdio, a
pipe, or a socket, or if you use the I<--synchronous> option, then
nbdcopy works in synchronous mode with no parallelism, and nothing
else in this section applies.

The I<--connections=N> option controls NBD multi-conn (see
L<libnbd(3)/Multi-conn>), opening up to N connections to the NBD
server (or to both NBD servers if copying between NBD servers).  This
defaults to 4.  The NBD servers must support and advertise multi-conn
(for L<nbdkit(1)> availability of multi-conn can depend on the
plugin).  If the NBD server doesn’t advertise multi-conn then only one
connection will be opened regardless of the I<--connections> flag.

When copying between two NBD servers, the number of connections is
limited to the minimum multi-conn supported on both sides.  For the
purposes of this calculation, you can consider local files and block
devices as supporting infinite multi-conn.

The I<--threads=N> option allows nbdcopy to start up to N threads
(defaulting to the number of cores).  However nbdcopy cannot use more
threads than the number of NBD connections.

The I<--requests=N> option controls the maximum number of requests in
flight on each NBD connection.  This enables the NBD server to process
requests in parallel even when multi-conn isn’t available or when
using a single thread.  The default is chosen to allow a reasonable
amount of parallelism without using too much memory.

Because of this parallelism, nbdcopy does not read or write blocks in
order.  If for some reason you require that blocks are copied in
strict order then you must use I<--synchronous>.

=head1 SEE ALSO

L<libnbd(3)>,
L<nbdfuse(1)>,
L<nbdinfo(1)>,
L<nbdsh(1)>,
L<qemu-img(1)>.

=head1 AUTHORS

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2020 Red Hat Inc.
